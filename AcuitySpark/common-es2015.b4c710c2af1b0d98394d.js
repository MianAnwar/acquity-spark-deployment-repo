(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{"/Aqn":function(e,t,a){"use strict";a.d(t,"a",(function(){return n}));class n{transform(e,t){if(!e)return null;const a=e.reduce((e,a)=>(e[a[t]]?e[a[t]].push(a):e[a[t]]=[a],e),{});return console.log("Grouped Array",Object.keys(a).reverse().map(e=>({key:e,value:a[e]}))),Object.keys(a).reverse().map(e=>({key:e,value:a[e]}))}}},"6Uxl":function(e,t,a){"use strict";a.d(t,"c",(function(){return s})),a.d(t,"b",(function(){return i})),a.d(t,"a",(function(){return u}));var n=a("wSIQ"),s=function(e){return e.text="text",e.Date="datetime ",e.Numeric="numeric",e.phone="phone",e.validation="validation",e.list="list",e.multiList="multiList",e.binary="binary",e}({});class i{static getFieldDataTypeByDbName(e,t){const a=e.find(e=>e.columnDbName==t);return a?a.ruleDataType:s.text}static getFieldDataTypeByDisplayName(e,t){const a=e.find(e=>e.columnDisplayName==t);return a?a.ruleDataType:s.text}static isDateField(e,t,a){let n;return t&&""!=t&&(n=e.find(e=>e.columnDisplayName==t)),a&&""!=a&&(n=e.find(e=>e.columnDbName==a)),!(!n||n.ruleDataType!=s.Date)}static isValidationField(e,t,a){let n;return t&&""!=t&&(n=e.find(e=>e.columnDisplayName==t)),a&&""!=a&&(n=e.find(e=>e.columnDbName==a)),!(!n||n.ruleDataType!=s.validation)}static isTextField(e,t,a){let n;return t&&""!=t&&(n=e.find(e=>e.columnDisplayName==t)),a&&""!=a&&(n=e.find(e=>e.columnDbName==a)),!(!n||n.ruleDataType!=s.text)}static isListingField(e,t,a){let n;return t&&""!=t&&(n=e.find(e=>e.columnDisplayName==t)),a&&""!=a&&(n=e.find(e=>e.columnDbName==a)),!(!n||n.ruleDataType!=s.list)}static isNumericField(e,t,a){let n;return t&&""!=t&&(n=e.find(e=>e.columnDisplayName==t)),a&&""!=a&&(n=e.find(e=>e.columnDbName==a)),!(!n||n.ruleDataType!=s.Numeric)}static isBinaryField(e,t,a){let n;return t&&""!=t&&(n=e.find(e=>e.columnDisplayName==t)),a&&""!=a&&(n=e.find(e=>e.columnDbName==a)),!(!n||n.ruleDataType!=s.binary)}static isStringFieldByColName(e,t){const a=e.find(e=>e.columnDisplayName==t);return!(!a||a.ruleDataType!=s.text)}static isRuleFieldByColName(e,t){const a=e.find(e=>e.columnDisplayName==t);return!(!a||!a.isRuleField)}static getCustomerFields(e,t,a,n,s=!1){const i=[];return e.forEach(e=>{e.isHidden||e.isAssigned!=s||(t?i.push(e.columnDbName):a?i.push(e.columnDisplayName):n&&i.push({id:e.columnDbName,name:e.columnDisplayName}))}),i}static getRuleFields(e,t,a,n){const s=[];return e.forEach(e=>{e.isRuleField&&(t?s.push(e.columnDbName):a?s.push(e.columnDisplayName):n&&s.push({id:e.columnDbName,name:e.columnDisplayName}))}),s}static getCustomerDedupeFields(e,t,a){const n=[];return e?(n.push("name"),n.push("email"),n.push("phone"),n.push("address")):t?(n.push("Name"),n.push("Email"),n.push("Phone"),n.push("Address")):a&&(n.push({id:"name",name:"Name"}),n.push({id:"email",name:"Email"}),n.push({id:"phone",name:"Phone"}),n.push({id:"address",name:"Address"})),n}static getFilterFields(e,t,a,n){const s=[];return e.forEach(e=>{e.isFilterField&&(t?s.push(e.columnDbName):a?s.push(e.columnDisplayName):n&&s.push({id:e.columnDbName,name:e.columnDisplayName,groupName:e.groupName}))}),s}static getFilterFieldGroups(e){const t=[];return e.forEach(e=>{t.indexOf(e.groupName)<0&&t.push(e.groupName)}),t}static getCustomerGoldenFields(e,t,a,n){const s=[];return e.forEach(e=>{e.isGolden&&(t?s.push(e.columnDbName):a?s.push(e.columnDisplayName):n&&s.push({id:e.columnDbName,name:e.columnDisplayName}))}),s}static getOrderByFields(e,t,a,n){const s=[];return e.forEach(e=>{e.isMasterOrderBy&&(t?s.push(e.columnDbName):a?s.push(e.columnDisplayName):n&&s.push({id:e.columnDbName,name:e.columnDisplayName}))}),s}static getOrderBy(){const e=[];for(const t of Object.keys(n.b))e.push(n.b[t]);return e}static getGoldenFieldValueType(){const e=[];for(const t of Object.keys(n.c))Number.isNaN(parseInt(t,10))||e.push(n.c[t]);return e}static getGoldenIndicatorValueType(){const e=[];for(const t of Object.keys(n.d))Number.isNaN(parseInt(t,10))||e.push(n.d[t]);return e}static getColumns(e,t=!1){const a=[];return e.forEach(e=>{e.isHidden||e.isAssigned!=t||a.push({id:e.columnDbName,name:e.columnDisplayName,field:e.columnDbName,sortable:!0,filterable:!0,minWidth:150})}),a}}class u{static getCSRCustomerColumns(e){const t=[];return e.forEach(e=>{e.isHidden||t.push({id:e.columnDbName,name:e.columnDisplayName,field:e.columnDbName,sortable:!0,filterable:!0,minWidth:150})}),t}}}}]);